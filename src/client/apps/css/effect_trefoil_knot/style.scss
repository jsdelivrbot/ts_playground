// https://unindented.org/articles/trigonometry-in-sass/
@function pow($number, $exp) {
    $value: 1;
    @if $exp>0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

@function fact($number) {
    $value: 1;
    @if $number>0 {
        @for $i from 1 through $number {
            $value: $value * $i;
        }
    }
    @return $value;
}

@function pi() {
    @return 3.14159265359;
}

@function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1); // If the angle has 'deg' as unit, convert to radians.
    @if $unit==deg {
        $unitless: $unitless / 180 * pi();
    }
    @return $unitless;
}

@function sin($angle) {
    $sin: 0;
    $angle: rad($angle); // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
    }
    @return $sin;
}

@function cos($angle) {
    $cos: 0;
    $angle: rad($angle); // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }
    @return $cos;
}

$n: 72; //* same number as number of balls in DOM */
$p: 2;
$q: 2;
$d: 1.5em; //* ball diameter */
$tm: .25s; //* moving animation duration */
$tr: 20s; //* rotating animation duration */
$rot: r $tr linear infinite;
$ba: 360deg/$n; //* distribution base angle */
$r: 3*$d; //* distribution radius */
$rev: $rot reverse;
@function v($i, $a: $ba) {
    $ca: $i*$a;
    $x: $r*(sin($ca) + $p*sin($q*$ca));
    $y: $r*(cos($ca) - $p*cos($q*$ca));
    $z: $r*sin(($q + 1)*$ca); //* with - for right-handed */
    @return $x,
    $y,
    $z
}

body {
    overflow: hidden;
    margin: 0;
    height: 100vh;
    perspective: 29em;
    background: #000;
}

div {
    position: absolute;
    transform-style: preserve-3d
}

.a {
    top: 50%;
    left: 50%;
    animation: $rot;
}

@keyframes r {
    to {
        transform: rotatey(1turn)
    }
}

.b {
    transform: translate3d(var(--vi));
    animation: m $tm linear infinite;
    @for $i from 0 to $n {
        $j: $i + 1;
        &:nth-child(#{$j}) {
            --i: #{$i};
            --j: #{$j};
            --vi: #{v($i)};
            --vf: #{v($j)};
        }
    }
    &:before,
    &:after {
        position: absolute;
        margin: -.5*$d;
        width: $d;
        height: $d;
        border-radius: 50%;
        box-shadow: 0 0 2px #fff;
        background: radial-gradient(circle at 35% 25%, #fff, currentColor/* currentcolor fail in Edge */
        );
        /* calc in hsl fails in Firefox, so result is all grey */
        color: hsl(calc(var(--i)*#{$ba/1deg}), 100%, 65%);
        animation: $rev;
        content: ''
    }
    &:after {
        --i: var(--j);
        animation: $rev, f $tm linear infinite;
    }
}

@keyframes m {
    to {
        transform: translate3d(var(--vf))
    }
}

@keyframes f {
    0% {
        opacity: 0
    }
}